buildscript {
	ext {
		kotlinVersion = '1.0.3'
		springBootVersion = '2.0.0.BUILD-SNAPSHOT'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
	}
}

apply plugin: 'kotlin'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

jar {
	baseName = 'CognitiveGuru'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
	maven { url "https://jitpack.io" }
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
	runtime('mysql:mysql-connector-java')
	compile('com.github.rubenlagus:TelegramBots:v2.4.0')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
}

task buildDocker(dependsOn: build, type:Exec) {
	doFirst {
		println "Building docker image"
	}
	def dockerBuild = ["docker", "build", "-t", "cognitiveguru:latest", "."]
	commandLine dockerBuild
}

task deployEC2(dependsOn:build, type:Exec) {
	doFirst {
		println "Deploying on ec2"
	}
	def copyJar = ["scp", "-i", "~/.ssh/apnastartup.pem", "build/libs/CognitiveGuru-0.0.1-SNAPSHOT.jar",
						"ec2-user@54.147.152.45:/home/ec2-user"]
	def startServer = ["nohup", "java", "-Djava.security.egd=file:/dev/./urandom","-jar", "/app.jar"]
	commandLine copyJar
}